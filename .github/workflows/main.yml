# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:


  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
      
jobs:
  setup-and-deploy:
    name: Setup and Deploy
    runs-on: ubuntu-latest

    # Add "id-token" with the intended permissions.
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Terraform
      uses: hashicorp/setup-terraform@v2
      
    - name: Sleep
      uses: jakejarvis/wait-action@master

    # Configure Workload Identity Federation and generate an access token.
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v0'
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

    # Setup gcloud CLI
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v0

    # Get the GKE credentials so we can deploy to the cluster
    #- run: |-
       # gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"
        
    - name: 'Use gcloud CLI'
      run: 'gcloud info'
    
    - name: Terraform Init
      id: init
      run: terraform init -lock=false
      
    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color -lock=false
      continue-on-error: true
      
    - name: Terraform Apply
      run: terraform apply -auto-approve -lock=false
      
    - name: Get kubectl Connection
      run: gcloud container clusters get-credentials crypto-parser-350713-gke --region europe-west1
      continue-on-error: true
      
    - name: Install Arkade
      run: curl -sLS https://get.arkade.dev | sudo sh
    
    - name: Test Arkade
      run: arkade --help
      
    - name: Install Openfaas
      run: arkade install openfaas --load-balancer
      continue-on-error: true
      
    - name: Sleep 2 min
      run: sleep 120s
    
    - name: Get IP
      run: export GATEWAY_IP=$(kubectl get service gateway-external -n openfaas -o jsonpath="{.status.loadBalancer.ingress[0].ip}")
      continue-on-error: true
    
    - name: Test IP
      run: kubectl get service gateway-external -n openfaas -o jsonpath="{.status.loadBalancer.ingress[0].ip}"
      continue-on-error: true
      
    - name: Sleep 60
      run: sleep 60s
      continue-on-error: true
      
    - name: Get IP to be sure
      run: export GATEWAY_IP=$(kubectl get service gateway-external -n openfaas -o jsonpath="{.status.loadBalancer.ingress[0].ip}")
      continue-on-error: true
      
    - name: Get Password
      run: export PASSWORD=$(kubectl get secret -n openfaas basic-auth -o jsonpath="{.data.basic-auth-password}" | base64 --decode; echo)
      continue-on-error: true
    
    - name: Test Password
      run: kubectl get secret -n openfaas basic-auth -o jsonpath="{.data.basic-auth-password}" | base64 --decode; echo
      continue-on-error: true
    
    - name: Download open-faas cli
      run: curl -sSL https://cli.openfaas.com | sudo -E sh
      continue-on-error: true
      
    - name: Connect to Openfaas
      run: echo -n $PASSWORD | faas-cli login --username admin --password-stdin --gateway http://$GATEWAY_IP:8080
      continue-on-error: true
    
    - name: Push Test function
      run: faas-cli store deploy 'NodeInfo' --gateway http://$GATEWAY_IP:8080
      continue-on-error: true
    
    - name: Destroy Cluster
      run: terraform destroy -lock=false -auto-approve
      
